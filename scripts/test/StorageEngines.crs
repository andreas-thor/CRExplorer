/*
This script checks if the storage engines "MM" (main memory) and "DB" (database) are equivalent. 
To this end, several files are imported, some data manipulation is done (remove CRs, cluster & merge) 
and the resulting export files are checked if they are byte-wise equivalent.
*/

import org.apache.commons.io.FileUtils

// get script directory to get relative paths to file
def scriptDir = new File(getClass().protectionDomain.codeSource.location.path).parent

// CRExplorer Script
set (n_pct_range: 1)

files = [
    [type: "WOS", files: [ "${scriptDir}/../data/savedrecs_JOI1.txt", "${scriptDir}/../data/savedrecs_JOI2.txt"]],
    [type: "SCOPUS", files: [ "${scriptDir}/../data/scopus_export_csv_incl_citations_abstract_references.csv"]],
    [type: "CRE", files: [ "${scriptDir}/../data/sciento_bearb.cre"]]
]

for (file in files) {
    for (removeRPY in [ [10 ,2013], null ]) {
        for (removeNCR in [ [0, 10], null ]) {
            for (threshold : [0.5, 0.75, 0.9, null]) {

                for (engine in ["MM", "DB"]) {

                    init (engine)
                    if (file.type == "CRE") openFile (file) else importFile (file)


                    print (getStatistics())
                    input ("Warte")

                    removeCR (RPY: removeRPY)
                    removeCR (N_CR: removeNCR)
                    if (threshold != null) {
                        cluster (threshold: threshold)
                        merge()
                    }
                    exportFile (type: "CSV_CR_PUB", file: "${scriptDir}/${engine}.csv")
                }

                // compare the resulting two files and delete them afterwards
                assert FileUtils.contentEquals(new File ("${scriptDir}/MM.csv"), new File ("${scriptDir}/DB.csv"))
                new File ("${scriptDir}/MM.csv").delete()
                new File ("${scriptDir}/DB.csv").delete()

                input("HJ")
            }
        }
    }
}